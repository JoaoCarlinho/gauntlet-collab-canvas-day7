# Railway-optimized Dockerfile with Python base image fallbacks
# This handles Docker Hub connectivity issues with multiple fallback strategies

# Try multiple Python base images in order of preference
FROM python:3.9-slim

# If the above fails, Railway will try these alternatives:
# FROM ghcr.io/python:3.9-slim
# FROM public.ecr.aws/docker/library/python:3.9-slim
# FROM python:3.9-alpine
# FROM python:3.10-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY backend/requirements.txt /app/requirements.txt

# Install Python dependencies with retry mechanism
RUN for i in 1 2 3; do \
        pip install --no-cache-dir -r requirements.txt && break || \
        (echo "Attempt $i failed, retrying..." && sleep 5); \
    done

# Copy the backend application
COPY backend/ /app/

# Set environment variables
ENV FLASK_APP=run.py
ENV FLASK_ENV=production
ENV PYTHONPATH=/app

# Expose port
EXPOSE 5000

# Health check using curl (more reliable than Python urllib)
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:5000/health/ || exit 1

# Start the application
CMD ["python", "run.py"]
